//
//
//
// $FUNCTIONS
//
//
// @author Benjamin Charity <ben@benjamincharity.com>
//
// @doc
//  Define custom mixins and functions
// @end


// set a base font that should match the browser default
//$base-font-size: 16px;

//$site-width: 100%;

// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline-px: 16px;

@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem; }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {
      // If the value is zero, return 0
      @if $value == 0 {
        $rem-values: append($rem-values, $value); }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}


//
// Working in ems is annoying. Think in pixels by using this handy function, emCalc(#px)
//
@function emCalc($pxWidth) {
  @return $pxWidth / $base-font-size * 1em;
}




///////////////////////////
//
// Pseudo Element Mixins
//
///////////////////////////

//
// mixin to provide a clear to any element with IE6-7 support
//
@mixin clear-ie {
  &:before,
  &:after {
    content: "\0020";
    display: table;
  }
  &:after { clear: both; }
  @if $ie7-support {
    & { zoom: 1; }
  }
}

//
//mixin to provide a clear to modern browsers IE8 and up
//
@mixin clear {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}




///////////////////////////
//
// My custom transition function - much more humanistic than easing etc
//
///////////////////////////

@mixin customTransition($property: all, $timing: 300ms) {
  -webkit-transition: $property $timing cubic-bezier(0.26, 0.86, 0.44, 0.985);
  -moz-transition:    $property $timing cubic-bezier(0.26, 0.86, 0.44, 0.985);
  -ms-transition:     $property $timing cubic-bezier(0.26, 0.86, 0.44, 0.985);
  -o-transition:      $property $timing cubic-bezier(0.26, 0.86, 0.44, 0.985);
  transition:         $property $timing cubic-bezier(0.26, 0.86, 0.44, 0.985);
}




///////////////////////////
//
// Hide text
//
///////////////////////////

@mixin hideText {
  color: transparent;
  overflow: hidden;
  text-indent: 100%;
  white-space: nowrap;
}




///////////////////////////
//
// Custom Animation
//
///////////////////////////

@mixin animation($duration: 200ms, $delay: 0, $count: 1) {
  animation-duration: $duration;
  animation-delay: $delay;
  animation-iteration-count: $count;
  -moz-animation-duration: $duration;
  -moz-animation-delay: $delay;
  -moz-animation-iteration-count: $count;
  -webkit-animation-duration: $duration;
  -webkit-animation-delay: $delay;
  -webkit-animation-iteration-count: $count;
  -ms-animation-duration: $duration;
  -ms-animation-delay: $delay;
  -ms-animation-iteration-count: $count;
  -o-animation-duration: $duration;
  -o-animation-delay: $delay;
  -o-animation-iteration-count: $count;
}




///////////////////////////
//
// Create a grid
// http://bjorkoy.com/2010/05/css-grids-with-sass/
//
///////////////////////////

// maths
$col_width: ($width - ($col_margin * ($columns - 1))) / $columns;
$col_total_width: $col_width + $col_margin;

// create row div
@mixin row() {
  @include clear;
  width: $width;
}

// create a column div
@mixin col($n: 1) {
  float: left;
  @include span($n);
}

// make an element span n columns
@mixin span($n: 1) {
  width: ($n * $col_width) + (($n - 1) * $col_margin);
  @if $n == $columns {
    margin-right: 0;
  }
  @else {
    margin-right: $col_margin;
  }
}

// the last column in a row needs this
@mixin last() {
  margin-right: 0;
}

// if you need to overwrite a previous `last()`, use this
@mixin resetLast() {
  margin-right: $col_margin;
}

// prepend n blank columns
@mixin prepend($n: 1) {
  margin-left: $col_total_width * $n
}

// append n blank columns
@mixin append($n: 1) {
  margin-right: $col_total_width * $n + $col_margin
}
